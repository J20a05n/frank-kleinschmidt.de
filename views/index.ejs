<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>In KÃ¼rze Online</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

        body {
            font-family: 'Orbitron', sans-serif;
            color: #e0e0e0;
            background: linear-gradient(-45deg, #0a0a0a, #1a1a1a, #2a2a2a, #000000);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            text-align: center;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            cursor: none;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            position: relative;
            z-index: 2;
        }

        h1 {
            font-size: 4rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 5px;
            margin-bottom: 20px;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5),
                         0 0 20px rgba(0, 255, 255, 0.5),
                         0 0 30px rgba(0, 255, 255, 0.3),
                         0 0 40px rgba(0, 255, 255, 0.2);
            animation: glow 2s ease-in-out infinite alternate;
        }
        
        @keyframes glow {
            from {
                text-shadow: 0 0 10px rgba(0, 255, 255, 0.5),
                             0 0 20px rgba(0, 255, 255, 0.5),
                             0 0 30px rgba(0, 255, 255, 0.3),
                             0 0 40px rgba(0, 255, 255, 0.2);
            }
            to {
                text-shadow: 0 0 20px rgba(0, 255, 255, 0.7),
                             0 0 30px rgba(0, 255, 255, 0.7),
                             0 0 40px rgba(0, 255, 255, 0.5),
                             0 0 50px rgba(0, 255, 255, 0.4);
            }
        }

        p {
            font-size: 1.5rem;
            letter-spacing: 2px;
            margin-bottom: 40px;
        }

        .wip-text {
            font-weight: 400;
            border: 2px solid #00ffff;
            padding: 15px 30px;
            display: inline-block;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
        }
        
        #starfield, #mouse-trail {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        #starfield {
            z-index: 0;
        }

        #mouse-trail {
            z-index: 1;
            pointer-events: none;
        }

        .attribution {
            position: fixed;
            bottom: 10px;
            right: 10px;
            z-index: 100;
            font-size: 12px;
            color: #555;
            pointer-events: auto;
        }

        .attribution a {
            color: #777;
            text-decoration: none;
            border-bottom: 1px dotted #777;
            cursor: pointer;
        }

        .attribution a:hover {
            color: #ccc;
            border-bottom-color: #ccc;
        }
    </style>
</head>
<body>
    <canvas id="starfield"></canvas>
    <canvas id="mouse-trail"></canvas>
    <div class="container">
        <h1>Coming Soon</h1>
        <p class="wip-text">Diese Seite befindet sich im Aufbau.</p>
    </div>

    <div class="attribution">
        <p>crafted by <a href="https://j-p-k.de" target="_blank">Jan Philipp Kleinschmidt</a></p>
    </div>

    <script>
        // Starfield animation
        const starfieldCanvas = document.getElementById('starfield');
        const starfieldCtx = starfieldCanvas.getContext('2d');

        function resizeStarfield() {
            starfieldCanvas.width = window.innerWidth;
            starfieldCanvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeStarfield);
        resizeStarfield();

        const stars = [];
        const numStars = 300;

        for (let i = 0; i < numStars; i++) {
            stars.push({
                x: Math.random() * starfieldCanvas.width,
                y: Math.random() * starfieldCanvas.height,
                size: Math.random() * 1.5 + 0.5,
                speed: Math.random() * 0.5 + 0.1
            });
        }

        function drawStars() {
            starfieldCtx.clearRect(0, 0, starfieldCanvas.width, starfieldCanvas.height);
            starfieldCtx.fillStyle = '#e0e0e0';
            
            stars.forEach(star => {
                starfieldCtx.beginPath();
                starfieldCtx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                starfieldCtx.fill();
            });
        }

        function updateStars() {
            stars.forEach(star => {
                star.y += star.speed;
                if (star.y > starfieldCanvas.height) {
                    star.y = 0;
                    star.x = Math.random() * starfieldCanvas.width;
                }
            });
        }

        // Mouse trail animation
        const trailCanvas = document.getElementById('mouse-trail');
        const trailCtx = trailCanvas.getContext('2d');

        function resizeTrail() {
            trailCanvas.width = window.innerWidth;
            trailCanvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeTrail);
        resizeTrail();

        const particles = [];
        const mouse = {
            x: null,
            y: null
        }

        window.addEventListener('mousemove', function(event) {
            mouse.x = event.x;
            mouse.y = event.y;
            for (let i = 0; i < 3; i++) {
                particles.push(new Particle());
            }
        });
        
        class Particle {
            constructor() {
                this.x = mouse.x;
                this.y = mouse.y;
                this.size = Math.random() * 4 + 1;
                this.speedX = Math.random() * 3 - 1.5;
                this.speedY = Math.random() * 3 - 1.5;
                this.color = 'hsl(' + Math.random() * 360 + ', 100%, 50%)';
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.size > 0.2) this.size -= 0.1;
            }
            draw() {
                trailCtx.fillStyle = this.color;
                trailCtx.beginPath();
                trailCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                trailCtx.fill();
            }
        }

        function handleParticles() {
            for (let i = 0; i < particles.length; i++) {
                particles[i].update();
                particles[i].draw();
                if (particles[i].size <= 0.3) {
                    particles.splice(i, 1);
                    i--;
                }
            }
        }

        function animate() {
            // starfieldCtx.clearRect(0, 0, starfieldCanvas.width, starfieldCanvas.height);
            trailCtx.clearRect(0, 0, trailCanvas.width, trailCanvas.height);
            drawStars();
            updateStars();
            handleParticles();
            requestAnimationFrame(animate);
        }

        animate();
    </script>
</body>
</html>